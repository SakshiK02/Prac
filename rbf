import numpy as np
import pandas as pd
import math
from sklearn.cluster import KMeans
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

bank = pd.read_csv("/content/bank-full.csv")
bank.head()

column = ["age","balance","day","duration","day","duration","campaign","pdays","previous"]
bank_encode = bank.drop(column, axis = 1)
bank_encode.head()
bank_encode = bank_encode.apply(LabelEncoder().fit_transform)
bank_encode
bank_rest = bank[column]
bank_rest
bank = pd.concat([bank_rest,bank_encode], axis = 1)
bank

bank_train , bank_test = train_test_split(bank, test_size = 0.33, random_state=4)
X_train = bank_train.drop("Target", axis =1)
Y_train = bank_train["Target"]
X_test = bank_test.drop("Target", axis =1)
Y_test = bank_test["Target"]

scaler = StandardScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)
X_train

#Determine centers

K_cent = 8
km = KMeans(n_clusters=K_cent, max_iter = 100)
km.fit(X_train)
cent = km.cluster_centers_

#determine sigma

max = 0
for i in range(K_cent):
  for j in range(K_cent):
    d = np.linalg.norm(cent[i] - cent[j])
    if (d > max):
      max = d

d=max
sigma = d/math.sqrt(2*K_cent)
sigma

#Gmatrix

shape = X_train.shape
row = shape[0]
col = K_cent
G = np.empty((row,col), dtype = float)
for i in range(row):
  for j in range(col):
    dist = np.linalg.norm(X_train[i] - cent[j])
    G[i][j] = math.exp(-math.pow(dist,2)/math.pow(2*sigma,2))

GTG = np.dot(G.T,G)
GTG_inv = np.linalg.inv(GTG)
fac = np.dot(GTG_inv,G.T)
W= np.dot(fac,Y_train)

row= X_test.shape[0]
col= K_cent
G_test= np.empty((row,col), dtype= float)
for i in range(row):
    for j in range(col):
        dist= np.linalg.norm(X_test[i]-cent[j])
        G_test[i][j]= math.exp(-math.pow(dist,2)/math.pow(2*sigma,2))

from sklearn.metrics import accuracy_score

prediction= np.dot(G_test,W)
prediction= 0.5*(np.sign(prediction-0.5)+1)

score= accuracy_score(prediction,Y_test)
print (score.mean())
